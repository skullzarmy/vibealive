# GitLab CI configuration for VibeAlive Next.js analysis
stages:
  - install
  - analyze
  - report

variables:
  NODE_VERSION: '18'
  VIBEALIVE_MAX_ISSUES: '5'
  VIBEALIVE_CONFIDENCE: '80'

# Cache configuration
cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/

install_dependencies:
  stage: install
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Dependencies installed"
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

# Main analysis job
vibealive_analysis:
  stage: analyze
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - npx vibealive analyze . 
        --ci 
        --fail-on-issues 
        --max-issues ${VIBEALIVE_MAX_ISSUES} 
        --confidence-threshold ${VIBEALIVE_CONFIDENCE} 
        --format json,md 
        --output ./vibealive-reports
  artifacts:
    when: always
    reports:
      # GitLab can parse JSON reports
      junit: vibealive-reports/*.json
    paths:
      - vibealive-reports/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Focused scans for different areas
vibealive_theme_scan:
  stage: analyze
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - npx vibealive theme-scan . --format json
  artifacts:
    paths:
      - vibealive-reports/
    expire_in: 3 days
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - changes:
        - "**/tailwind.config.*"
        - "**/globals.css"
        - "**/layout.*"

vibealive_seo_scan:
  stage: analyze
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - npx vibealive seo-scan . --format json
  artifacts:
    paths:
      - vibealive-reports/
    expire_in: 3 days
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - changes:
        - "**/metadata.*"
        - "**/sitemap.*"
        - "**/robots.*"

# Generate comprehensive report
generate_report:
  stage: report
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - vibealive_analysis
  script:
    - |
      # Create HTML report from markdown
      if command -v pandoc >/dev/null 2>&1; then
        find vibealive-reports -name "*.md" -exec pandoc {} -o {}.html \;
      fi
      
      # Create summary for GitLab
      echo "## VibeAlive Analysis Summary" > analysis_summary.md
      echo "" >> analysis_summary.md
      cat vibealive-reports/*.md >> analysis_summary.md
  artifacts:
    paths:
      - vibealive-reports/
      - analysis_summary.md
    expire_in: 1 month
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Pages deployment (if GitLab Pages is enabled)
pages:
  stage: report
  dependencies:
    - generate_report
  script:
    - mkdir public
    - cp -r vibealive-reports/* public/
    - cp analysis_summary.md public/index.md
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Strict production check
production_check:
  stage: analyze
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - npx vibealive analyze . 
        --ci 
        --fail-on-issues 
        --max-issues 0 
        --confidence-threshold 95 
        --format json
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "production"
  allow_failure: false
