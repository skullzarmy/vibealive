# GitHub Actions workflow for VibeAlive Next.js analysis
name: Code Analysis with VibeAlive

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly analysis
    - cron: '0 6 * * 1'

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run VibeAlive Analysis
      run: |
        npx vibealive analyze . \
          --ci \
          --fail-on-issues \
          --max-issues 5 \
          --format json,md \
          --output ./vibealive-reports
      
    - name: Upload Analysis Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vibealive-analysis
        path: ./vibealive-reports/
        retention-days: 30
        
    - name: Comment PR with Analysis
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest markdown report
          const reportsDir = './vibealive-reports';
          const files = fs.readdirSync(reportsDir)
            .filter(f => f.endsWith('.md'))
            .sort()
            .reverse();
            
          if (files.length === 0) return;
          
          const reportPath = path.join(reportsDir, files[0]);
          const report = fs.readFileSync(reportPath, 'utf8');
          
          // Truncate report for PR comment (GitHub has size limits)
          const truncatedReport = report.length > 60000 
            ? report.substring(0, 60000) + '\n\n*Report truncated. See full report in artifacts.*'
            : report;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## VibeAlive Analysis Results\n\n${truncatedReport}`
          });

  # Optional: Deploy analysis results to GitHub Pages
  deploy-report:
    runs-on: ubuntu-latest
    needs: analyze
    if: github.ref == 'refs/heads/main' && always()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download Analysis Reports
      uses: actions/download-artifact@v4
      with:
        name: vibealive-analysis
        path: ./reports
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './reports'
        
    - name: Deploy to Pages
      uses: actions/deploy-pages@v4
      
# Optional: Strict mode for production branches
  strict-analysis:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Strict Analysis (Zero Tolerance)
      run: |
        npx vibealive analyze . \
          --ci \
          --fail-on-issues \
          --max-issues 0 \
          --confidence-threshold 90 \
          --format json
